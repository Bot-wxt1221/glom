# Initialization macros:
AC_INIT
AC_CONFIG_SRCDIR([glom/main.cc])

AC_CONFIG_HEADERS([config.h])

# Package name and version number:
AM_INIT_AUTOMAKE(glom, 1.9.3)

AM_MAINTAINER_MODE

# Checks for programs:
AC_PROG_CC
AC_PROG_CXX
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AM_SANITY_CHECK

# libgettext-po changed its API, changing the error handler struct from po_error_handler to po_xerror_handler:
AC_CHECK_MEMBER([struct po_xerror_handler.xerror], [have_gettext_po_xerror="yes"], [have_gettext_po_xerror="no"], [#include <gettext-po.h>])
if test "$have_gettext_po_xerror" = "yes"; then
{
  AC_DEFINE([HAVE_GETTEXTPO_XERROR],[1], [Defined when libgettextpo has the new po_xerror_handler error handling struct.])
}
fi

#Internationalisation:
GETTEXT_PACKAGE=glom
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED([GETTEXT_PACKAGE], ["$GETTEXT_PACKAGE"],
		   [The domain name to use with gettext.])

ALL_LINGUAS="ar ca cs de dz en_CA en_GB es fi fr gl gu hu it nb ne nl oc pa pt pt_BR rw sq sv tr vi zh_CN"

AM_GLIB_GNU_GETTEXT
IT_PROG_INTLTOOL([0.35.0])

AC_ARG_ENABLE([scrollkeeper],
[AS_HELP_STRING([--disable-scrollkeeper],[do not make updates to the scrollkeeper database])],,
   enable_scrollkeeper=yes)
AM_CONDITIONAL(ENABLE_SK, test "x$enable_scrollkeeper" = "xyes")

#AC_CONFIG_AUX_DIR(macros)
AC_SUBST([ACLOCAL_AMFLAGS], ['-I macros ${ACLOCAL_FLAGS}'])

# Copied from gobby:
AC_MSG_CHECKING([whether to enable WIN32 specific flags])
case "$host_os" in
*mingw*)
        win32=true
        AC_MSG_RESULT([yes])
        AC_CHECK_TOOL(WINDRES, windres)
        ;;
*)
        win32=false
        AC_MSG_RESULT([no])
        ;;
esac
AM_CONDITIONAL(WIN32, test x$win32 = xtrue)

AC_LANG([C++])

AC_ARG_ENABLE([client-only],
	AS_HELP_STRING([--enable-client-only],[build without developer mode and self-hosting]),
	[enable_client_only=$enableval],
	[enable_client_only=no])

AC_ARG_ENABLE([maemo],
	AS_HELP_STRING([--enable-maemo],[build with support for the maemo platform (implies --enable-client-only)]),
	[enable_maemo=$enableval],
	[enable_maemo=no])

AM_CONDITIONAL(GLOM_ENABLE_MAEMO, test "$enable_maemo" = "yes")
if test "$enable_maemo" = "yes"; then
	AC_DEFINE([GLOM_ENABLE_MAEMO], 1, [Whether to enable support for the maemo platform])
	# Implies clientonly
	enable_client_only="yes"
fi


AM_CONDITIONAL(GLOM_ENABLE_CLIENT_ONLY, test "$enable_client_only" = "yes")

if test "$enable_client_only" = "yes"; then
	AC_DEFINE([GLOM_ENABLE_CLIENT_ONLY], 1, [Whether to disable support for self-hosting and developer mode])
fi


AC_ARG_ENABLE([sqlite],
	AS_HELP_STRING([--enable-sqlite],[Allow creation of SQLite databases and opening of documents using SQLite databases. This disables some functionality and is intended only for embedded use. [default=no]]),
	[enable_sqlite=$enableval],
	[enable_sqlite=no])

AM_CONDITIONAL(GLOM_ENABLE_SQLITE, test "$enable_sqlite" = "yes")
if test "$enable_sqlite" = "yes"; then
	AC_DEFINE([GLOM_ENABLE_SQLITE], 1, [Whether to enable support for SQLite databases.])
fi


AC_ARG_ENABLE([postgresql],
	AS_HELP_STRING([--enable-postgresql],[Allow creation of PostgreSQL databases and opening of documents using PostgreSQL databases. [default=yes]]),
	[enable_postgresql=$enableval],
	[enable_postgresql=yes])

AM_CONDITIONAL(GLOM_ENABLE_POSTGRESQL, test "$enable_postgresql" = "yes")
if test "$enable_postgresql" = "yes"; then
	AC_DEFINE([GLOM_ENABLE_POSTGRESQL], 1, [Whether to enable support for PostgreSQL databases.])
fi


# Do not require, goocanvas and gtksourceviewmm in client only mode
REQUIRED_LIBS="bakery-2.6 >= 2.6.0 gtkmm-2.4 >= 2.10 gthread-2.0 libxslt >= 1.1.10 pygda-4.0 >= 2.25.3 pygtk-2.0 >= 2.6.0 libgdamm-4.0 >= 3.99.12 libgda-4.0 >= 3.99.12 libgda-postgres-4.0 goocanvasmm-1.0 >= 0.13.0"
if test $enable_client_only != yes; then
	REQUIRED_LIBS="$REQUIRED_LIBS gtksourceviewmm-2.0"
fi

# TODO_maemo: Make sure bakery was also compiled with (or without, respectively) maemo support
if test "$enable_maemo" = "yes"; then
	REQUIRED_LIBS="$REQUIRED_LIBS hildonmm libepc-1.0 >= 0.3.1 avahi-ui";
elif test "$win32" = "true"; then
	REQUIRED_LIBS="$REQUIRED_LIBS gtkmm-2.4 >= 2.10";
else
	REQUIRED_LIBS="$REQUIRED_LIBS iso-codes libepc-1.0 >= 0.3.1 avahi-ui";
fi

if test "$enable_sqlite" = "yes"; then
	REQUIRED_LIBS="$REQUIRED_LIBS libgda-sqlite-4.0"
fi

# Checks for libraries
PKG_CHECK_MODULES(GLOM, $REQUIRED_LIBS)

GLOM_LIBS="$GLOM_LIBS --no-undefined"
AC_SUBST(GLOM_CFLAGS)
AC_SUBST(GLOM_LIBS)

# Temporary egg CFLAGS
PKG_CHECK_MODULES(EGG, gtk+-2.0 >= 2.5.0)
GLIB_GENMARSHAL=`$PKG_CONFIG --variable=glib_genmarshal glib-2.0`  
AC_SUBST(GLIB_GENMARSHAL)

#Get the location of the ISO-Codes (currencies, languages) files:
AC_DEFINE_UNQUOTED([ISO_CODES_PREFIX],["`$PKG_CONFIG --variable=prefix iso-codes`"],[ISO codes prefix])

# Get the CFLAGS and LIBS for python's embedding API:
AM_CHECK_PYTHON_HEADERS(,[AC_MSG_ERROR(could not find Python headers)])

# We don't have this on mingw, for example
AC_CHECK_FUNCS(strptime)

# Install path for DTD (e.g. /usr/local/share/glom):

#I would like to use this line, but it doesn't fully evaluate.
#It appears in config.h as "${prefix}/share/glom"
#So I hard-code "share" instead.
#GLOM_DTD_INSTALL_DIR="\"${datadir}/${PACKAGE}\""

GLOM_DTD_INSTALL_DIR="\"${prefix}/share/${PACKAGE}\""
AC_DEFINE_UNQUOTED(GLOM_DTD_INSTALL_DIR, $GLOM_DTD_INSTALL_DIR, "definition of GLOM_DTD_INSTALL_DIR")

# Evaluate the --enable-warnings=level option.
GLOM_ARG_ENABLE_WARNINGS()

AC_ARG_ENABLE(update-mime-database,
        AS_HELP_STRING([--disable-update-mime-database],[do not run the update-mime-database utility (mostly useful for package maintainers) ]))
AM_CONDITIONAL(UPDATE_MIME_DATABASE, test "$enable_update_mime_database" != "no")

# Option not needed on Windows
if test $win32 != true; then
	# Ask user for path to the directory containing the postgresql utilities, such as the postmaster executable, so we can self-host postgresql databases:
	# We default to the path used by Ubuntu (Dapper and Edgy) so that the build works at least somewhere by default.
	AC_ARG_WITH(postgres-utils,
	    [ --with-postgres-utils=<path> path to the postmaster executable. e.g. /usr/lib/postgresql/8.3/bin (ignored on Windows)],
	    [POSTGRES_UTILS_PATH=$with_postgres_utils],
	    [POSTGRES_UTILS_PATH=/usr/lib/postgresql/8.3/bin]
	)

	AC_SUBST(POSTGRES_UTILS_PATH)
	AC_DEFINE_UNQUOTED([POSTGRES_UTILS_PATH], ["${POSTGRES_UTILS_PATH}"], [Path to the postgres utilities, such as postgres, pg_ctl, etc.])

	if test $enable_client_only != yes; then
		# Check that the supplied (or default) path really contains the postgres utilities:
                # We check for pg_ctl rather than postgres, because postgres seem too general a name.
		AC_CHECK_PROG(HAVE_POSTGRES, pg_ctl, yes, no, ${POSTGRES_UTILS_PATH})
		if test "x$HAVE_POSTGRES" = "xno"; then
		AC_MSG_ERROR([The postgres utilities could not be found in the path: ${POSTGRES_UTILS_PATH}. They are needed for self-hosting of Glom databases. Please make sure that Postgres is installed, and provide the correct path with the --with-postgres-utils option.])
		fi
	fi
fi


# Allow use of gnome-doc-utils to be disabled for platforms (For instance, Maemo) that don't have it:
AC_ARG_ENABLE([doc-utils],
	AS_HELP_STRING([--enable-doc-utils],[Whether the documentation should be built.]),
	[enable_doc=$enableval],
	[enable_doc=yes])


AM_CONDITIONAL(HAVE_GNOME_DOC_UTILS, test "$enable_doc" = "yes")

# For gnome-doc-utils:
if test $enable_doc = yes; then
  GNOME_DOC_INIT([0.9.0])
fi

# Add an --enable-maemo-launcher option.
AC_ARG_ENABLE([maemo-launcher],
              [AS_HELP_STRING([--enable-maemo-launcher],
                              [build with maemo-launcher support])],
                              [case "${enableval}" in
                               yes) maemo_launcher=true ;;
                               no)  maemo_launcher=false ;;
                               *) AC_MSG_ERROR([bad value ${enableval} for --enable-maemo-launcher]) ;;
                               esac], [maemo_launcher=false])

if test x$maemo_launcher = xtrue
then
	PKG_CHECK_MODULES(MAEMO_LAUNCHER, [maemo-launcher-app])
	AC_SUBST(MAEMO_LAUNCHER_CFLAGS)
	AC_SUBST(MAEMO_LAUNCHER_LIBS)
fi

# Generate Makefiles, configuration files and scripts:
AC_CONFIG_FILES([Makefile \
  glom/Makefile \
    docs/Makefile \
      docs/user-guide/Makefile \
    glom/libglom/glom-1.0.pc \
    glom/libglom/Makefile \
      glom/libglom/data_structure/Makefile \
        glom/libglom/data_structure/layout/Makefile \
          glom/libglom/data_structure/layout/report_parts/Makefile \
      glom/libglom/document/Makefile \
      glom/libglom/connectionpool_backends/Makefile \
      glom/libglom/python_embed/Makefile \
    glom/layout_item_dialogs/Makefile \
    glom/mode_data/Makefile \
    glom/mode_design/Makefile \
      glom/mode_design/fields/Makefile \
      glom/mode_design/print_layouts/Makefile \
      glom/mode_design/users/Makefile \
      glom/mode_design/script_library/Makefile \
    glom/mode_find/Makefile \
    glom/navigation/Makefile \
    glom/utility_widgets/Makefile \
      glom/utility_widgets/calendar/Makefile \
      glom/utility_widgets/cellrendererlist/Makefile \
      glom/utility_widgets/adddel/Makefile \
        glom/utility_widgets/adddel/eggcolumnchooser/Makefile \
      glom/utility_widgets/canvas/Makefile \
      glom/utility_widgets/db_adddel/Makefile \
      glom/utility_widgets/egg/Makefile
        glom/utility_widgets/egg/toolpalette/Makefile \
        glom/utility_widgets/egg/util/Makefile \
      glom/python_embed/Makefile \
        glom/python_embed/python_module/Makefile \
    glom/relationships_overview/Makefile \
    glom/reports/Makefile \
    glom/translation/Makefile \
    icons/Makefile \
      icons/16x16/Makefile \
      icons/22x22/Makefile \
      icons/24x24/Makefile \
      icons/32x32/Makefile \
      icons/48x48/Makefile \
      icons/scalable/Makefile \
      icons/win32/Makefile \
    xslt/Makefile \
    po/Makefile.in \
  macros/Makefile \
  examples/Makefile \
  regression_tests/Makefile \
  glom.desktop.in \
  win32/Makefile \
  win32/glom.iss
])
AC_OUTPUT



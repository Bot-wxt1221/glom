# Initialization macros:
AC_INIT(glom/main.cc)

AM_CONFIG_HEADER(config.h)

# Package name and version number:
AM_INIT_AUTOMAKE(glom, 1.5.1)

AM_MAINTAINER_MODE

# Checks for programs:
AC_PROG_CC
AC_PROG_CXX
AM_PROG_LIBTOOL
AM_SANITY_CHECK

# libgettext-po changed its API, changing the error handler struct from po_error_handler to po_xerror_handler:
AC_CHECK_MEMBER([struct po_xerror_handler.xerror], [have_gettext_po_xerror="yes"], [have_gettext_po_xerror="no"], [#include <gettext-po.h>])
if test "$have_gettext_po_xerror" = "yes"; then
{
  AC_DEFINE([HAVE_GETTEXTPO_XERROR],[1], [Defined when libgettextpo has the new po_xerror_handler error handling struct.])
}
fi

#Internationalisation:
GETTEXT_PACKAGE=glom
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED([GETTEXT_PACKAGE], ["$GETTEXT_PACKAGE"],
		   [The domain name to use with gettext.])

ALL_LINGUAS="ar ca cs de dz en_CA en_GB es fi fr gl gu hu it nb ne nl pa pt pt_BR rw sq sv tr vi zh_CN"

AM_GLIB_GNU_GETTEXT
IT_PROG_INTLTOOL([0.35.0])

AC_ARG_ENABLE([scrollkeeper],
[AC_HELP_STRING([--disable-scrollkeeper],
   [do not make updates to the scrollkeeper database])],,
   enable_scrollkeeper=yes)
AM_CONDITIONAL(ENABLE_SK, test "x$enable_scrollkeeper" = "xyes")

#AC_CONFIG_AUX_DIR(macros)
AC_SUBST([ACLOCAL_AMFLAGS], ['-I macros ${ACLOCAL_FLAGS}'])

#For gnome-doc-utils:
AM_CONDITIONAL(HAVE_GNOME_DOC_UTILS, 1)
GNOME_DOC_INIT([0.9.0])

AC_LANG_CPLUSPLUS

# Checks for libraries
# We need libgnome only for gnome_help_display().:
PKG_CHECK_MODULES(GLOM, bakery-2.4 >= 2.3.18 gtkmm-2.4 >= 2.10 gthread-2.0 gnome-vfsmm-2.6 >= 2.11.1 libxslt >= 1.1.10 pygda-3.0 pygtk-2.0 >= 2.6.0 libgnome-2.0 >= 2.6.0 iso-codes libgdamm-3.0 libgtksourceviewmm-1.0 libgda-3.0 >= 3.0.1 libgda-postgres-3.0 avahi-glib goocanvas)

GLOM_LIBS+=" --no-undefined"
AC_SUBST(GLOM_CFLAGS)
AC_SUBST(GLOM_LIBS)

#Get the location of the ISO-Codes (currencies, languages) files:
AC_DEFINE_UNQUOTED([ISO_CODES_PREFIX],["`$PKG_CONFIG --variable=prefix iso-codes`"],[ISO codes prefix])

# Get the CFLAGS and LIBS for python's embedding API:
AM_CHECK_PYTHON_HEADERS(,[AC_MSG_ERROR(could not find Python headers)])


# Install path for DTD (e.g. /usr/local/share/glom):

#I would like to use this line, but it doesn't fully evaluate.
#It appears in config.h as "${prefix}/share/glom"
#So I hard-code "share" instead.
#GLOM_DTD_INSTALL_DIR="\"${datadir}/${PACKAGE}\""

GLOM_DTD_INSTALL_DIR="\"${prefix}/share/${PACKAGE}\""
AC_DEFINE_UNQUOTED(GLOM_DTD_INSTALL_DIR, $GLOM_DTD_INSTALL_DIR, "definition of GLOM_DTD_INSTALL_DIR")

# Evaluate the --enable-warnings=level option.
GLOM_ARG_ENABLE_WARNINGS()

AC_ARG_ENABLE(update-mime-database,
        AC_HELP_STRING([--disable-update-mime-database],
        [do not run the update-mime-database utility (mostly useful for package maintainers) ]))
AM_CONDITIONAL(UPDATE_MIME_DATABASE, test "$enable_update_mime_database" != "no")


# Ask user for path to the directory containing the postgresql utilities, such as the postmaster executable, so we can self-host postgresql databases:
# We default to the path used by Ubuntu (Dapper and Edgy) so that the build works at least somewhere by default.
AC_ARG_WITH(postgres-utils,
    [ --with-postgres-utils=<path> path to the postmaster executable. e.g. /usr/lib/postgresql/8.2/bin],
    [POSTGRES_UTILS_PATH=$with_postgres_utils],
    [POSTGRES_UTILS_PATH=/usr/lib/postgresql/8.2/bin]
)

AC_SUBST(POSTGRES_UTILS_PATH)
AC_DEFINE_UNQUOTED([POSTGRES_UTILS_PATH], ["${POSTGRES_UTILS_PATH}"], [Path to the postgres utilities, such as postmaster.])

# Check that the supplied (or default) path really contains the postgres utilities:
AC_CHECK_PROG(HAVE_POSTMASTER, postmaster, yes, no, ${POSTGRES_UTILS_PATH})
if test "x$HAVE_POSTMASTER" = "xno"; then
AC_MSG_ERROR([The postgres utilities could not be found in the path: ${POSTGRES_UTILS_PATH}. They are needed for self-hosting of Glom databases. Please make sure that Postgres is installed, and provide the correct path with the --with-postgres-utils option.])
fi

# Generate Makefiles, configuration files and scripts:
AC_OUTPUT(Makefile \
  docs/Makefile \
    docs/user-guide/Makefile \
  glom/Makefile \
    glom/libglom/Makefile \
      glom/libglom/data_structure/Makefile \
        glom/libglom/data_structure/layout/Makefile \
          glom/libglom/data_structure/layout/report_parts/Makefile \
      glom/libglom/document/Makefile \
      glom/libglom/python_embed/Makefile \
    glom/layout_item_dialogs/Makefile \
    glom/mode_data/Makefile \
    glom/mode_design/Makefile \
      glom/mode_design/fields/Makefile \
      glom/mode_design/users/Makefile \
      glom/mode_design/script_library/Makefile \
    glom/mode_find/Makefile \
    glom/navigation/Makefile \
    glom/utility_widgets/Makefile \
      glom/utility_widgets/adddel/Makefile \
        glom/utility_widgets/adddel/eggcolumnchooser/Makefile \
      glom/utility_widgets/db_adddel/Makefile \
      glom/python_embed/Makefile \
        glom/python_embed/python_module/Makefile \
    glom/relationships_overview/Makefile \
    glom/reports/Makefile \
    glom/translation/Makefile \
    icons/Makefile \
      icons/16x16/Makefile \
      icons/22x22/Makefile \
      icons/24x24/Makefile \
      icons/32x32/Makefile \
      icons/48x48/Makefile \
      icons/scalable/Makefile \
    xslt/Makefile \
    po/Makefile.in \
  macros/Makefile \
  examples/Makefile \
  glom.desktop.in
)


